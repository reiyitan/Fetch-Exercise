1. I chose Python because I am most comfortable working with .csv files using Python. Initially I was going to use Pandas to parse the .csv but I later decided that
using the csv module was a much more simple solution. I made use of the datetime module to easily compare the ages of each transaction when sorting. 

2. One advantage of my solution is that it maintains a constant record of the remaining balance of each transaction that still has a positive amount of points. What
this means is that it would be very easy to modify my code to support the ability to input new transactions during runtime. A disadvantage of this functionality is
that maintaining a dictionary of payer balances and a list of transactions can be memory intensive. Another disadvantage of my solution is that I sacrificed some
efficiency for code readability. The TransactionList.initBalances and TransactionList.initTransactions could be combined into one function, allowing for one pass of
the .csv file to initialize an instance of a TransactionList. Instead, I perform 2 passes of the .csv to separate the initialization of the dictionary that tracks
payer balances, and the list that tracks each transaction. 

3. My favorite project so far was a Discord bot I created that allows users to play word games either on their own or against each other. This project introduced me to
new technologies such as the discord.py API as well as the sqlite3 Python module. This project also required me to combine algorithms and data structures to optimize
efficiency. Implementing a trie to store valid words was the most important data structure I used, as it allowed me to return early from depth first search paths that
wouldn't have found any valid words. Had I not implemented the trie, my search of a 4x4 matrix of letters would have taken an exponential amount of time. Using a trie
reduced my runtime to less than a second. 
